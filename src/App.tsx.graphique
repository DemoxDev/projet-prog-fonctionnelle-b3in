import React, { useState, useEffect } from 'react';
import { ChakraProvider, Box, Heading, Select, Input, Stack, Text, useToast } from '@chakra-ui/react';
import { 
  getStudents, getStudentById, createStudent, updateStudent, deleteStudent, getStudentsByGender, getStudentsByCity, getStudentsByString
} from './services/students.service'; 
import { 
  getProfessors, getProfessorById, createProfessor, updateProfessor, deleteProfessor, getTop3RecurringStudentsPerProfessor,
  getProfessorsInMultipleSessions
} from './services/professors.service'; 
import { 
  getStudentGroups, getStudentGroupById, createStudentGroup, updateStudentGroup, deleteStudentGroup, assignGroupToCourseSession, getStudentGroupByCourseSessionId,
  getStudentsInMultipleGroups
} from './services/studentGroups.service'; 
import { 
  getCourseSessions, getCourseSessionById, createCourseSession, updateCourseSession, deleteCourseSession, assignProfessorToCourseSession, getCourseSessionsSortedByDate, getCourseSessionsByMonth, countStudentsWithMoreThanXCourses, getCourseSessionWithMostStudents, getCourseSessionsByCity

} from './services/courseSessions.service';
import { ProfessorModel } from './models/professorModel';
import CourseSessionModel from './models/courseSessionModel';
import { StudentModel } from './models/studentModel';
import { StudentGroupModel } from './models/studentGroupModel';
import { DataTable } from './components/DataTable';
import { AnimatePresence, motion } from 'framer-motion';

// PAS FINI
function App() {
  const [students, setStudents] = useState<StudentModel[]>([]);
  const [courseSessions, setCourseSessions] = useState<CourseSessionModel[]>([]);
  const [studentGroups, setStudentGroups] = useState<StudentGroupModel[]>([]);
  const [professors, setProfessors] = useState<ProfessorModel[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [action, setAction] = useState<string>('students');
  const [filterText, setFilterText] = useState<string>('');
  const [filteredData, setFilteredData] = useState<any[]>([]);
  const toast = useToast();

  useEffect(() => {
    const fetchData = async () => {
      try {
        const studentsData = await getStudents();
        const courseSessionsData = await getCourseSessions();
        const studentGroupsData = await getStudentGroups();
        const professorsData = await getProfessors();
        setStudents(studentsData);
        setCourseSessions(courseSessionsData);
        setStudentGroups(studentGroupsData);
        setProfessors(professorsData);
      } catch (error) {
        console.error("Error fetching data:", error);
      } finally {
        setIsLoading(false);
      }
    };

    fetchData();
  }, []);

  const title = "Gestion d'école";

  const tableVariants = {
    hidden: { opacity: 0 },
    visible: { opacity: 1, transition: { staggerChildren: 0.1 } }
  };

  const rowVariants = {
    hidden: { opacity: 0 },
    visible: { opacity: 1 },
  };

  const handleActionChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
    setAction(e.target.value);
    setFilterText(''); 
  };

  const handleFilterChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setFilterText(e.target.value);
  };

  const handleAction = async (action: string, filterText: string) => {
    setIsLoading(true);
  
    try {
      let data: any[] | ProfessorModel | ProfessorModel[] | undefined; // Initialize data as an empty array
  
      switch (action) {
        case 'getStudentById':
          break;
        case 'updateStudent':
          break;
        case 'deleteStudent':
          break;
        // ... same cases for professor, studentGroup and courseSession (get[Entity]ById, update[Entity], delete[Entity])
        case 'getStudents':
          data = filterText ? await getStudentsByString(filterText) : students;
          break;
        case 'getProfessors':
          data = filterText ? await getProfessorById(filterText) : professors;
          break;
        case 'getStudentGroups':
          data = filterText ? await getStudentGroups() : studentGroups; // Filter student groups later if needed
          break;
        case 'getCourseSessions':
          data = filterText ? await getCourseSessions() : courseSessions; // Filter course sessions later if needed
          break;
        // ... (your create cases)
        case 'getStudentsByCity':
          data = await getStudentsByCity(filterText);
          break;
        case 'getStudentsInMultipleGroups':
          data = await getStudentsInMultipleGroups();
          break;
        case 'getProfessorsInMultipleSessions':
          data = await getProfessorsInMultipleSessions();
          break;
        case 'getCourseSessionsByCity':
          data = await getCourseSessionsByCity(filterText);
          break;
        case 'getCourseSessionsSortedByDate':
          data = await getCourseSessionsSortedByDate();
          break;
        case 'getCourseSessionsByMonth':
          // get month and year from filterText, then call getCourseSessionsByMonth
          break;
        case 'countStudentsWithMoreThanXCourses':
          const x = parseInt(filterText, 10);
          if (!isNaN(x) && x > 1) {
            data = [{ result: await countStudentsWithMoreThanXCourses(x) }];
          } else {
            toast({ title: "Please enter a valid number greater than 1", status: "error", isClosable: true });
          }
          break;
        case 'doesProfessorTeachInCity':
          // get professor id and city from filterText, then call doesProfessorTeachInCity
          break;
        case 'getTop3RecurringStudentsPerProfessor':
          data = await getTop3RecurringStudentsPerProfessor();
          break;
        default:
          break;
      }
      setFilteredData(data || []); // Assign an empty array if data is undefined
    } catch (error) {
      console.error(`Error performing ${action}:`, error);
      toast({ title: `Error performing ${action}`, status: "error", isClosable: true });
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <ChakraProvider>
      <Box p={4}>
        <Heading as="h1" mb={4}>School Management App</Heading>

        {/* Action and Filter */}
        <Stack direction="row" mb={4}>
          <Select placeholder="Select action" value={action} onChange={(e) => setAction(e.target.value)}>
            <option value="students">Trouver un étudiant</option>
            <option value="courseSessions">Trouver une session de cours</option>
            <option value="studentGroups">Trouver un groupe d'étudiant</option>
            <option value="professors">Trouver un professeur</option>
          </Select>
          <Input placeholder="Filter..." value={filterText} onChange={(e) => setFilterText(e.target.value)} />
        </Stack>

        {/* Table Display */}
        {isLoading ? (
          <Text>Loading...</Text>
        ) : (
          <AnimatePresence>
            <motion.div initial="hidden" animate="visible" exit="hidden">
              {/* Wrap all DataTable components in a single parent element */}
              <Box>
                <DataTable title={action.charAt(0).toUpperCase() + action.slice(1)} data={filteredData} rowVariants={rowVariants} /> {/* Only show the relevant table */}
              </Box>
            </motion.div>
          </AnimatePresence>
        )}
      </Box>
    </ChakraProvider>
  );
}

export default App;
